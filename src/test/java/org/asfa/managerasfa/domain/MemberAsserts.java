package org.asfa.managerasfa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MemberAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMemberAllPropertiesEquals(Member expected, Member actual) {
        assertMemberAutoGeneratedPropertiesEquals(expected, actual);
        assertMemberAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMemberAllUpdatablePropertiesEquals(Member expected, Member actual) {
        assertMemberUpdatableFieldsEquals(expected, actual);
        assertMemberUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMemberAutoGeneratedPropertiesEquals(Member expected, Member actual) {
        assertThat(expected)
            .as("Verify Member auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMemberUpdatableFieldsEquals(Member expected, Member actual) {
        assertThat(expected)
            .as("Verify Member relevant properties")
            .satisfies(e -> assertThat(e.getMemberUID()).as("check memberUID").isEqualTo(actual.getMemberUID()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getMiddleName()).as("check middleName").isEqualTo(actual.getMiddleName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getSignupDate()).as("check signupDate").isEqualTo(actual.getSignupDate()))
            .satisfies(e -> assertThat(e.getRank()).as("check rank").isEqualTo(actual.getRank()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMemberUpdatableRelationshipsEquals(Member expected, Member actual) {
        assertThat(expected)
            .as("Verify Member relationships")
            .satisfies(e -> assertThat(e.getEventsubscriptions()).as("check eventsubscriptions").isEqualTo(actual.getEventsubscriptions()))
            .satisfies(e -> assertThat(e.getMember()).as("check member").isEqualTo(actual.getMember()));
    }
}
